name: 'Interop Core Deployment Validation'
description: 'Validates charts, microservices, and cronjobs'
inputs:
  environment:
    description: 'Environment to validate'
    required: true
  infra_commons_tag:
    description: 'infra-commons tag'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout scripts repository
      uses: actions/checkout@v4
      with:
        repository: pagopa/interop-infra-commons
        path: interop-infra-commons
        fetch-depth: 0
        sparse-checkout: 'scripts/helm'
        ref: ${{ inputs.infra_commons_tag }}

    - name: Helm Chart Linting Microservice
      run: |
        set -euo pipefail
        export PROJECT_DIR=$(pwd)
        ./interop-infra-commons/scripts/helm/helmLint-main.sh --debug --environment ${{ inputs.environment }} --output console --microservices -i $PROJECT_DIR/commons/${{ inputs.environment }}/images.yaml

    - name: Helm Chart Linting Cronjob
      run: |
        set -euo pipefail
        export PROJECT_DIR=$(pwd)
        ./interop-infra-commons/scripts/helm/helmLint-main.sh --debug --environment ${{ inputs.environment }} --output console --jobs -i $PROJECT_DIR/commons/${{ inputs.environment }}/images.yaml

    - name: Kube-linter download
      run: |
        set -euo pipefail
        curl -sSLO https://github.com/stackrox/kube-linter/releases/download/v0.7.1/kube-linter-linux_arm64.tar.gz
        tar -xzf kube-linter-linux_arm64.tar.gz
        chmod +x kube-linter-linux_arm64/kube-linter
        sudo mv kube-linter-linux_arm64/kube-linter /usr/local/bin/kube-linter
        kube-linter --version

    - name: Get Microservices List
      run: |
        TARGET_ENVIRONMENT="${{ inputs.environment }}"
        MICROSERVICES=$(find microservices -type f -path "*/$TARGET_ENVIRONMENT/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | tr '\n' ' ')
        echo "MICROSERVICES=$MICROSERVICES" >> $GITHUB_ENV

    - name: Microservices Template & Lint
      run: |
        set -euo pipefail
        export PROJECT_DIR=$(pwd)
        if [[ -n "$MICROSERVICES" ]]; then
          for MICROSERVICE_NAME in $MICROSERVICES; do
            ./interop-infra-commons/scripts/helm/helmTemplate-svc-single.sh --debug --environment ${{ inputs.environment }} --microservice $MICROSERVICE_NAME -i $PROJECT_DIR/commons/${{ inputs.environment }}/images.yaml --output /tmp/helm-template-${MICROSERVICE_NAME}.yaml
            kube-linter lint /tmp/helm-template-${MICROSERVICE_NAME}.yaml
          done
        else
          echo "No microservices found for environment ${{ inputs.environment }}"
        fi

    - name: Get Cronjobs List
      run: |
        TARGET_ENVIRONMENT="${{ inputs.environment }}"
        CRONJOBS=$(find jobs -type f -path "*/$TARGET_ENVIRONMENT/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | tr '\n' ' ')
        echo "CRONJOBS=$CRONJOBS" >> $GITHUB_ENV

    - name: Cronjobs Template & Lint
      run: |
        set -euo pipefail
        export PROJECT_DIR=$(pwd)
        if [[ -n "$CRONJOBS" ]]; then
          for CRONJOB_NAME in $CRONJOBS; do
            ./interop-infra-commons/scripts/helm/helmTemplate-cron-single.sh --debug --environment ${{ inputs.environment }} --job $CRONJOB_NAME -i $PROJECT_DIR/commons/${{ inputs.environment }}/images.yaml --output /tmp/helm-template-cronjob-${CRONJOB_NAME}.yaml
            kube-linter lint /tmp/helm-template-cronjob-${CRONJOB_NAME}.yaml
          done
        else
          echo "No cronjobs found for environment ${{ inputs.environment }}"
        fi
